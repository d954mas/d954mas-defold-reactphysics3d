local DIRTY_LARRY = require "gooey-dirtylarry.dirtylarry"
local MONARCH = require "monarch.monarch"
local GOOEY = require "gooey.gooey"

local LISTITEM_SELECTED = hash("button_pressed")
local LISTITEM_PRESSED = hash("button_pressed")
local LISTITEM_OVER = hash("button_normal")
local LISTITEM_NORMAL = hash("button_normal")

local COLOR_BASE = vmath.vector4(1)
local COLOR_CURRENT = vmath.vector4(0,1,0,1)

local CURRENT_IDX = 1

local function update_listitem(list, item)
	local pos = gui.get_position(item.root)
	local lbl_node = item.nodes[hash("list/listitem_text")]
	gui.set_color(lbl_node,COLOR_BASE)
	if(item.index == CURRENT_IDX)then
		gui.set_color(lbl_node,COLOR_CURRENT)
	end

	if item == list.selected_item then
		pos.x = 4
		gui.play_flipbook(item.root, LISTITEM_PRESSED)
		gui.set_color(lbl_node,COLOR_SELECTED)
	elseif item == list.pressed_item then
		pos.x = 1
		gui.play_flipbook(item.root, LISTITEM_SELECTED)
	elseif item == list.over_item_now then
		pos.x = 1
		gui.play_flipbook(item.root, LISTITEM_OVER)
	elseif item == list.out_item_now then
		pos.x = 0
		gui.play_flipbook(item.root, LISTITEM_NORMAL)
	elseif item ~= list.over_item then
		pos.x = 0
		gui.play_flipbook(item.root, LISTITEM_NORMAL)
	end
	gui.set_position(item.root, pos)
end

local function update_dynamic_list(list)
	for _, item in ipairs(list.items) do
		update_listitem(list, item)
		gui.set_text(item.nodes[hash(list.id .. "/listitem_text")], tostring(item.data and item.data.id or "-"))
	end
end

local function update_list(self, action_id, action, fn)
	local list_id = "list"
	return GOOEY.dynamic_list(list_id, list_id .. "/stencil", list_id .. "/listitem_bg", self.list_data, action_id, action, nil, fn, update_dynamic_list)
end

local function list_on_item_selected(list)
	local data = list.data[list.selected_item]
	MONARCH.back(nil, function()
		timer.delay(0.01, false, function()
			MONARCH.replace(data.scene)
		end)
	end)
end

function init(self)
	gui.set_render_order(2)
	msg.post(".", "acquire_input_focus")
	self.list_data = {
		{ id = "Cubes", scene = "cubes" },
		{ id = "Cube Stack", scene = "cube_stack" },
		{ id = "Joints", scene = "joints" },
		{ id = "Collision Shapes", scene = "collision_shapes" },
		{ id = "Heightfield", scene = "heightfield" },
		{ id = "Raycast", scene = "raycast" },
		{ id = "Concave Mesh", scene = "concave_shape" },
		{ id = "Pile", scene = "pile" },
		{ id = "Box Tower", scene = "box_tower" },
		{ id = "Convex Mesh(cubes)", scene = "convex_mesh_cubes" },

		{ id = "BallSocket Joint", scene = "ball_and_socket_joint" },
		{ id = "BallSocket Net", scene = "ball_and_socket_joints_net" },
		{ id = "BallSocket Chain", scene = "ball_and_socket_joints_chain" },

		{ id = "Hinge Joint", scene = "hinge_joint" },
		{ id = "Hinge Chain", scene = "hinge_joint_chain" },
		{ id = "Slider Joint", scene = "slider_joint" },
		{ id = "Fixed Joint", scene = "fixed_joint" },
		{ id = "Bridge", scene = "bridge" },
		{ id = "Rope", scene = "rope" }
	}
	local list = update_list(self)

	local current_scene = MONARCH.top(-1)
	local idx = 1
	for i, data in ipairs(self.list_data) do
		if (hash(data.scene) == current_scene) then
			idx = i
		end
	end
	CURRENT_IDX = idx
	local x = (idx - 1) * 64
	local max_x = #self.list_data * 64 - 400
	list.scroll_to(0, math.min(1, x / max_x))
	update_list(self)


end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	DIRTY_LARRY.button("btn_close", action_id, action, function()
		MONARCH.back()
	end)
	update_list(self, action_id, action, list_on_item_selected)

	return true
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
