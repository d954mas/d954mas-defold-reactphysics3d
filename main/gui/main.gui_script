local SCENE_HELPER = require "main.gui.scene_helper"
local DIRTY_LARRY = require "gooey-dirtylarry.dirtylarry"
local GOOEY = require "gooey.gooey"
local MONARCH = require "monarch.monarch"
local LUME = require "libs.lume"

local gui_refresh_scale = function(button)
	button.initial_scale = button.initial_scale or gui.get_scale(button.node)
	if button.pressed then
		gui.set_scale(button.node, button.initial_scale * 0.8)
	else
		gui.set_scale(button.node, button.initial_scale)
	end
end

local function reset_gui(self)
	gui.set_text(self.vh.lbl_title, tostring(SCENE_HELPER.scene_config.name))
end

local function settings_set(self,name)
	gui.set_enabled(self.vh.settings.physics.root,false)
	gui.set_enabled(self.vh.settings.rendering.root,false)
	if(name == "physics")then
		gui.set_enabled(self.vh.settings.physics.root,true)
	elseif(name == "rendering")then
		gui.set_enabled(self.vh.settings.rendering.root,true)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.vh = {
		lbl_title = gui.get_node("scene_item/text"),
		simulation = {

		},
		profiling = {
			lbl_fps = gui.get_node("menu/profiling/fps/lbl"),
			lbl_dt = gui.get_node("menu/profiling/fps/dt/lbl"),
			lbl_physics_total = gui.get_node("menu/profiling/physics_total/lbl"),
			lbl_physics_step = gui.get_node("menu/profiling/physics_step/lbl"),
		},
		settings = {
			physics = {
				root = gui.get_node("menu/settings/physics")
			},
			rendering = {
				root = gui.get_node("menu/settings/rendering")
			}
		}
	}
	self.gui_functions = {
		btn_play = function() SCENE_HELPER.simulation.play = true end,
		btn_step = function()   SCENE_HELPER.simulation.make_step = true end,
		btn_pause = function()  SCENE_HELPER.simulation.play = false end,
		btn_restart = function() MONARCH.show(MONARCH.top(), { reload = true }) end,
		btn_settings_physics = function() settings_set(self,"physics") end,
		btn_settings_rendering = function() settings_set(self,"rendering") end,
		btn_scene_item = function()
			MONARCH.show("choose_scene")
		end,
		btn_timestep_1 = function()
			SCENE_HELPER.simulation.step = 0.001
			gui.set_text(gui.get_node("menu/settings/physics/timestep/lbl"),string.format("Step:%.2fms",SCENE_HELPER.simulation.step*1000))
		end,
		btn_timestep_2 = function()
			SCENE_HELPER.simulation.step =1/120
			gui.set_text(gui.get_node("menu/settings/physics/timestep/lbl"),string.format("Step:%.2fms",SCENE_HELPER.simulation.step*1000))
		end,
		btn_timestep_3 = function()
			SCENE_HELPER.simulation.step =1/60
			gui.set_text(gui.get_node("menu/settings/physics/timestep/lbl"),string.format("Step:%.2fms",SCENE_HELPER.simulation.step*1000))
		end,
		btn_timestep_4 = function()
			SCENE_HELPER.simulation.step =1/30
			gui.set_text(gui.get_node("menu/settings/physics/timestep/lbl"),string.format("Step:%.2fms",SCENE_HELPER.simulation.step*1000))
		end,
		btn_profiler = function(checkbox)
			self.profiler_enabled = not self.profiler_enabled
			profiler.enable_ui(self.profiler_enabled)
		end,
		btn_add_velocity = function()
			SCENE_HELPER.simulation.velocity_iterations = LUME.clamp(SCENE_HELPER.simulation.velocity_iterations+1,1,100)
			gui.set_text(gui.get_node("menu/settings/physics/velocity/lbl"),SCENE_HELPER.simulation.velocity_iterations)
		end,
		btn_remove_velocity = function()
			SCENE_HELPER.simulation.velocity_iterations = LUME.clamp(SCENE_HELPER.simulation.velocity_iterations-1,1,100)
			gui.set_text(gui.get_node("menu/settings/physics/velocity/lbl"),SCENE_HELPER.simulation.velocity_iterations)
		end,
		btn_add_position = function()
			SCENE_HELPER.simulation.position_iterations = LUME.clamp(SCENE_HELPER.simulation.position_iterations+1,1,100)
			gui.set_text(gui.get_node("menu/settings/physics/position/lbl"),SCENE_HELPER.simulation.position_iterations)
		end,
		btn_remove_position = function()
			SCENE_HELPER.simulation.position_iterations = LUME.clamp(SCENE_HELPER.simulation.position_iterations-1,1,100)
			gui.set_text(gui.get_node("menu/settings/physics/position/lbl"),SCENE_HELPER.simulation.position_iterations)
		end,

		chb_sleep = function(checkbox)
			local checked = checkbox.checked
			SCENE_HELPER.set_allow_sleep(checked)
		end,
		chb_gravity = function(checkbox)
			local checked = checkbox.checked
			SCENE_HELPER.set_enable_gravity(checked)
		end,

		chb_debug_draw = function(checkbox)
			local checked = checkbox.checked
			SCENE_HELPER.rendering.debug_draw = checked
		end,
		chb_contact_points = function(checkbox)
			local checked = checkbox.checked
			SCENE_HELPER.rendering.contact_points = checked
		end,
		chb_contact_normals = function(checkbox)
			local checked = checkbox.checked
			SCENE_HELPER.rendering.contact_normals = checked
		end,
		chb_broad_phase = function(checkbox)
			local checked = checkbox.checked
			SCENE_HELPER.rendering.broad_phase = checked
		end,
		chb_colliders_aabb = function(checkbox)
			local checked = checkbox.checked
			SCENE_HELPER.rendering.colliders_aabb = checked
		end,
		chb_shapes = function(checkbox)
			local checked = checkbox.checked
			SCENE_HELPER.rendering.shapes = checked
		end,
	}
	DIRTY_LARRY.checkbox("menu/settings/physics/chb_sleep").set_checked(SCENE_HELPER.simulation.sleep)
	DIRTY_LARRY.checkbox("menu/settings/physics/chb_gravity").set_checked(SCENE_HELPER.simulation.gravity)

	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_debug_draw").set_checked(SCENE_HELPER.rendering.debug_draw)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_contact_points").set_checked(SCENE_HELPER.rendering.contact_points)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_contact_normals").set_checked(SCENE_HELPER.rendering.contact_normals)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_broad_phase").set_checked(SCENE_HELPER.rendering.broad_phase)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_colliders_aabb").set_checked(SCENE_HELPER.rendering.colliders_aabb)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_shapes").set_checked(SCENE_HELPER.rendering.shapes)
	reset_gui(self)
	settings_set(self,"physics")
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function update_profiling(self)
	gui.set_text(self.vh.profiling.lbl_fps, string.format("%d", SCENE_HELPER.profiling.fps))
	gui.set_text(self.vh.profiling.lbl_dt, string.format("%.2fms(max)", SCENE_HELPER.profiling.dt * 1000))
	gui.set_text(self.vh.profiling.lbl_physics_total, SCENE_HELPER.profiling.phys_total)
	gui.set_text(self.vh.profiling.lbl_physics_step, string.format("%.2fms",SCENE_HELPER.profiling.phys_step*1000))
end

function update(self, dt)
	update_profiling(self)
	if (SCENE_HELPER.dirty) then
		SCENE_HELPER.dirty = false
		reset_gui(self)
	end
end

function on_message(self, message_id, message, sender)

end

function on_input(self, action_id, action)
	if(MONARCH.top() == hash("choose_scene"))then return false end
	DIRTY_LARRY.button("btn_play", action_id, action, self.gui_functions.btn_play, gui_refresh_scale)
	DIRTY_LARRY.button("btn_restart", action_id, action, self.gui_functions.btn_restart, gui_refresh_scale)
	DIRTY_LARRY.button("btn_pause", action_id, action, self.gui_functions.btn_pause, gui_refresh_scale)
	DIRTY_LARRY.button("btn_step", action_id, action, self.gui_functions.btn_step, gui_refresh_scale)
	DIRTY_LARRY.button("btn_profiler", action_id, action, self.gui_functions.btn_profiler, gui_refresh_scale)
	DIRTY_LARRY.button("menu/settings/btn_physics", action_id, action, self.gui_functions.btn_settings_physics, gui_refresh_scale)
	DIRTY_LARRY.button("menu/settings/btn_rendering", action_id, action, self.gui_functions.btn_settings_rendering, gui_refresh_scale)
	DIRTY_LARRY.button("scene_item", action_id, action, self.gui_functions.btn_scene_item, gui_refresh_scale)

	--PHYSICS
	DIRTY_LARRY.button("menu/settings/physics/velocity/btn_add", action_id, action, self.gui_functions.btn_add_velocity, gui_refresh_scale)
	DIRTY_LARRY.button("menu/settings/physics/velocity/btn_remove", action_id, action, self.gui_functions.btn_remove_velocity, gui_refresh_scale)
	DIRTY_LARRY.button("menu/settings/physics/position/btn_add", action_id, action, self.gui_functions.btn_add_position, gui_refresh_scale)
	DIRTY_LARRY.button("menu/settings/physics/position/btn_remove", action_id, action, self.gui_functions.btn_remove_position, gui_refresh_scale)
	DIRTY_LARRY.button("menu/settings/physics/timestep/btn_1", action_id, action, self.gui_functions.btn_timestep_1, gui_refresh_scale)
	DIRTY_LARRY.button("menu/settings/physics/timestep/btn_2", action_id, action, self.gui_functions.btn_timestep_2, gui_refresh_scale)
	DIRTY_LARRY.button("menu/settings/physics/timestep/btn_3", action_id, action, self.gui_functions.btn_timestep_3, gui_refresh_scale)
	DIRTY_LARRY.button("menu/settings/physics/timestep/btn_4", action_id, action, self.gui_functions.btn_timestep_4, gui_refresh_scale)
	DIRTY_LARRY.checkbox("menu/settings/physics/chb_sleep", action_id, action, self.gui_functions.chb_sleep)
	DIRTY_LARRY.checkbox("menu/settings/physics/chb_gravity", action_id, action, self.gui_functions.chb_gravity)

	--RENDERING
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_debug_draw", action_id, action, self.gui_functions.chb_debug_draw)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_contact_points", action_id, action, self.gui_functions.chb_contact_points)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_contact_normals", action_id, action, self.gui_functions.chb_contact_normals)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_broad_phase", action_id, action, self.gui_functions.chb_broad_phase)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_colliders_aabb", action_id, action, self.gui_functions.chb_colliders_aabb)
	DIRTY_LARRY.checkbox("menu/settings/rendering/chb_shapes", action_id, action, self.gui_functions.chb_shapes)


end

