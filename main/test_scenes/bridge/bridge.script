local SCENE_HELPER = require "main.gui.scene_helper"
local MONARCH = require "monarch.monarch"
local Box = require "main.objects.box"
local Dumbbell = require "main.objects.dumbbell"
local Sphere = require "main.objects.sphere"
local Capsule = require "main.objects.capsules"
local ConvexMesh = require "main.objects.convex_mesh"
local ConcaveMesh = require "main.objects.concave_mesh"

local SCENE_RADIUS = 60.0
local SPHERE_RADIUS = 2.0
local SPHERE_MASS = 40.0
local BOX_SIZE = vmath.vector3(2, 0.5, 4)
local NB_BRIDGES = 4
local NB_BOXES = 16

local function initBodiesPositions(self)
	for b = 0, NB_BRIDGES - 1 do
		for i = 0, NB_BOXES - 1 do
			local initPosition = vmath.vector3((-NB_BOXES / 2 + i) * (BOX_SIZE.x + 0.2),
					-7,
					(-NB_BRIDGES / 2 + b) * (BOX_SIZE.z + 4));
			local transform = { position = initPosition, quat = vmath.quat_rotation_z(0) }
			self.mBoxes[b * NB_BOXES + i].body:setTransform(transform);
		end
	end

	--Spheres
	for i = 0, NB_BRIDGES - 1 do
		local initPosition = vmath.vector3(-12,
				10,
				(-NB_BRIDGES / 2 + i) * (BOX_SIZE.z + 4));
		local transform = { position = initPosition, quat = vmath.quat_rotation_z(0) }
		self.mSpheres[i].body:setTransform(transform);
	end
end

local function createJoints(self)
	for b = 0, NB_BRIDGES - 1 do
		for i = 0, NB_BOXES - 2 do
			local box1Index = b * NB_BOXES + i;
			local box2Index = b * NB_BOXES + i + 1;
			local body1 = self.mBoxes[box1Index].body
			local body2 = self.mBoxes[box2Index].body
			local body1Position = body1:getTransformPosition()
			local anchorPointWorldSpace = body1Position + vmath.vector3(BOX_SIZE.x / 2.0, 0, 0);
			local jointInfo = rp3d.createHingeJointInfoWorldSpace(body1, body2, anchorPointWorldSpace, vmath.vector3(0, 0, 1));
			jointInfo.isCollisionEnabled = false
			table.insert(self.mHingeJoints, self.world:createJoint(jointInfo))
		end
	end
end

local function create_physics(self)
	local settings = {
		gravity = vmath.vector3(0, -9.81, 0)
	}
	self.world = rp3d.createPhysicsWorld(settings)
	---@type GameBox[]
	self.objects = {}

	self.mBoxes = {}
	self.mSpheres = {}
	self.mHingeJoints = {}

	for b = 0, NB_BRIDGES - 1 do
		-- Create all the boxes of the scene
		for i = 0, NB_BOXES - 1 do
			local boxIndex = b * NB_BOXES + i;
			local box = Box(true, BOX_SIZE, self.world)
			box.collider:setMaterialBounciness(0)
			if (i == 0 or i == NB_BOXES - 1) then
				box.body:setType(rp3d.BodyType.STATIC)
			end
			self.mBoxes[boxIndex] = box
			table.insert(self.objects, box)
		end
	end

	--    // Create all the spheres of the scene
	for i = 0, NB_BRIDGES - 1 do
		local sphere = Sphere(true, SPHERE_RADIUS, self.world)
		sphere.collider:setMaterialBounciness(0.2)
		sphere.body:setMass(SPHERE_MASS)
		self.mSpheres[i] = sphere
		table.insert(self.objects, sphere)
	end

	-- Set the position of the boxes before the joints creation
	initBodiesPositions(self)
	createJoints(self)

end

function init(self)

	create_physics(self)



	SCENE_HELPER.scene_new({
		name = "Bridge",
		world = self.world
	})

	msg.post("main:/camera3d", "set_position", { position = vmath.vector3(-8, 12, 70) })
	--timer.delay(0.05,false,function()
	--	MONARCH.show(MONARCH.top(), { reload = true })
	--end)
end

function update(self, dt)
	SCENE_HELPER.update(dt)
	SCENE_HELPER.updatePhysics(dt, self.objects)
	-- Test if the joints of the last bridge should break or not
	for i = 0, NB_BOXES - 2 do
		local jointIndex = #self.mHingeJoints - i;
		local joint = self.mHingeJoints[jointIndex]
		if (joint) then
			if (vmath.length_sqr(joint:getReactionForce(SCENE_HELPER.simulation.step)) > 60000000) then
				self.world:destroyJoint(joint)
				self.mHingeJoints[jointIndex] = false
			end
		end
	end
end

function final(self)
	for _, obj in ipairs(self.objects) do
		obj:dispose()
	end
	self.objects = nil

	rp3d.destroyPhysicsWorld(self.world)
	-- self.world:Destroy()
	--SCENE_HELPER.scene_final()
end



