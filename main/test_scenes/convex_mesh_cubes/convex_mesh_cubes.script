local SCENE_HELPER = require "main.gui.scene_helper"
local MONARCH = require "monarch.monarch"
local ConvexMesh = require "main.objects.convex_mesh"
local Box = require "main.objects.box"

local FLOOR_SIZE = vmath.vector3(30, 1, 30)   -- Floor dimensions in meters

local mesh = nil
local function init_mesh()
	local vertices = {}
	vertices[0] = -3;
	vertices[1] = -3;
	vertices[2] = 3;
	vertices[3] = 3;
	vertices[4] = -3;
	vertices[5] = 3;
	vertices[6] = 3;
	vertices[7] = -3;
	vertices[8] = -3;
	vertices[9] = -3;
	vertices[10] = -3;
	vertices[11] = -3;
	vertices[12] = -3;
	vertices[13] = 3;
	vertices[14] = 3;
	vertices[15] = 3;
	vertices[16] = 3;
	vertices[17] = 3;
	vertices[18] = 3;
	vertices[19] = 3;
	vertices[20] = -3;
	vertices[21] = -3;
	vertices[22] = 3;
	vertices[23] = -3;

	local indices = {}
	indices[0] = 0;
	indices[1] = 3;
	indices[2] = 2;
	indices[3] = 1;
	indices[4] = 4;
	indices[5] = 5;
	indices[6] = 6;
	indices[7] = 7;
	indices[8] = 0;
	indices[9] = 1;
	indices[10] = 5;
	indices[11] = 4;
	indices[12] = 1;
	indices[13] = 2;
	indices[14] = 6;
	indices[15] = 5;
	indices[16] = 2;
	indices[17] = 3;
	indices[18] = 7;
	indices[19] = 6;
	indices[20] = 0;
	indices[21] = 4;
	indices[22] = 7;
	indices[23] = 3;

	-- Description of the six faces of the convex mesh
	local polygonFaces = {}

	for f = 0, 5 do
		--// First vertex of the face in the indices array
		local face = {
			nbVertices = 4;
			indexBase = f * 4
		}
		polygonFaces[f] = face
	end
	mesh = rp3d.createPolyhedronMesh(vertices, indices, polygonFaces)
end
local function dispose_mesh()
	rp3d.destroyPolyhedronMesh(mesh)
	mesh = nil
end

local function create_physics(self)
	local settings = {
		gravity = vmath.vector3(0, -9.81, 0)
	}
	self.world = rp3d.createPhysicsWorld(settings)
	---@type GameBox[]
	self.objects = {}
	---@type ConvexMesh[]
	self.boxes = {}

	for i = 1, 3 do
		local box = ConvexMesh(true, mesh,"factory#box", self.world)
		table.insert(self.boxes, box)
		table.insert(self.objects, box)
	end

	--FLOOR
	self.floor = Box(true, FLOOR_SIZE, self.world);
	-- The floor must be a static rigid body
	self.floor.body:setType(rp3d.BodyType.STATIC);
	self.floor:setColor(self.floor.colors.floorColorDemo)
	self.floor:setColorSleeping(self.floor.colors.floorColorDemo)
	table.insert(self.objects, self.floor)

	self.floor.body:setTransform({ position = vmath.vector3(0), quat = vmath.quat_rotation_z(0) })

	self.boxes[1]:setScale(vmath.vector3(2),vmath.vector3(12))
	self.boxes[2]:setScale(vmath.vector3(1),vmath.vector3(6))
	self.boxes[3]:setScale(vmath.vector3(0.5),vmath.vector3(3))

	self.boxes[1]:setTransform({ position = vmath.vector3(0, 6, 0), quat = vmath.quat() })
	self.boxes[2]:setTransform({ position = vmath.vector3(0, 15, 0), quat = vmath.quat() })
	self.boxes[3]:setTransform({ position = vmath.vector3(0, 20, 0), quat = vmath.quat() })
end

function init(self)
	init_mesh()
	create_physics(self)

	SCENE_HELPER.scene_new({
		name = "convex mesh(cubes)",
		world = self.world
	})
	--timer.delay(0.05,false,function()
	--	MONARCH.show(MONARCH.top(), { reload = true })
	--end)
end

function update(self, dt)
	SCENE_HELPER.update(dt)
	SCENE_HELPER.updatePhysics(dt, self.objects)
end

function final(self)
	dispose_mesh()
	for _, obj in ipairs(self.objects) do
		obj:dispose()
	end
	self.objects = nil

	rp3d.destroyPhysicsWorld(self.world)
	-- self.world:Destroy()
	SCENE_HELPER.scene_final()
end



