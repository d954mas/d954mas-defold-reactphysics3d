local SCENE_HELPER = require "main.gui.scene_helper"
local MONARCH = require "monarch.monarch"
local Box = require "main.objects.box"
local Dumbbell = require "main.objects.dumbbell"
local Sphere = require "main.objects.sphere"
local Capsule = require "main.objects.capsules"
local ConvexMesh = require "main.objects.convex_mesh"
local ConcaveMesh = require "main.objects.concave_mesh"

local SCENE_RADIUS = 70.0
local BOX_SIZE = vmath.vector3(2, 2, 2)
local FLOOR_SIZE = vmath.vector3(50, 0.5, 50)

local function create_physics(self)
	local settings = {
		gravity = vmath.vector3(0, -9.81, 0)
	}
	self.world = rp3d.createPhysicsWorld(settings)
	---@type GameBox[]
	self.objects = {}

	local box = Box(true, vmath.vector3(4, 4, 4), self.world);
	box.body:setTransformPosition(vmath.vector3(0, 4, 0));
	box.body:setType(rp3d.BodyType.STATIC);

	table.insert(self.objects,box)

	local box2 = Box(true, vmath.vector3(4, 4, 4), self.world);
	box2.body:setTransformPosition(vmath.vector3(4, 4, 0));


	table.insert(self.objects,box2)


	local body1 = box.body
	local body2 = box2.body
	local body1Position = body1:getTransformPosition()
	local body2Position = body2:getTransformPosition()
	local anchorPointWorldSpace = 0.5 * (body2Position + body1Position) - vmath.vector3(0, 2, 0);
	local hingeAxisWorldSpace = vmath.vector3(0, 0, 1);
	local jointInfo = rp3d.createHingeJointInfoWorldSpace(body1, body2, anchorPointWorldSpace, hingeAxisWorldSpace);
	jointInfo.isCollisionEnabled = false;

	local joint = self.world:createJoint(jointInfo)
end

function init(self)
	create_physics(self)

	--msg.post("main:/camera3d", "set_position", { position = vmath.vector3(-8, 15, 100) })

	SCENE_HELPER.scene_new({
		name = "Hinge Joint",
		world = self.world
	})
	--timer.delay(0.05,false,function()
	--	MONARCH.show(MONARCH.top(), { reload = true })
	--end)
end

function update(self, dt)
	SCENE_HELPER.update(dt)
	SCENE_HELPER.updatePhysics(dt, self.objects)
end

function final(self)
	for _, obj in ipairs(self.objects) do
		obj:dispose()
	end
	self.objects = nil


	rp3d.destroyPhysicsWorld(self.world)
	-- self.world:Destroy()
	SCENE_HELPER.scene_final()
end



