local SCENE_HELPER = require "main.gui.scene_helper"
local MONARCH = require "monarch.monarch"
local Box = require "main.objects.box"
local Dumbbell = require "main.objects.dumbbell"
local Sphere = require "main.objects.sphere"
local Capsule = require "main.objects.capsules"
local ConvexMesh = require "main.objects.convex_mesh"
local ConcaveMesh = require "main.objects.concave_mesh"

local SCENE_RADIUS = 60.0
local BOX_SIZE = vmath.vector3(2, 1, 1)
local NB_BOXES = 20;

local function create_physics(self)
	local settings = {
		gravity = vmath.vector3(0, -9.81, 0)
	}
	self.world = rp3d.createPhysicsWorld(settings)
	---@type GameBox[]
	self.objects = {}
	---@type GameBox[]
	self.boxes = {}

	for i = 0, NB_BOXES - 1 do
		local box = Box(true, BOX_SIZE, self.world)
		box.collider:setMaterialBounciness(0)
		if (i == 0) then
			box.body:setType(rp3d.BodyType.STATIC)
		end
		table.insert(self.objects, box)
		table.insert(self.boxes, box)
	end

	local space = 0.3

	for i = 0, NB_BOXES - 1 do
		local initPosition = vmath.vector3(i * (BOX_SIZE.x + space), 20, 0)
		self.boxes[i+1].body:setTransformPosition(initPosition)
	end

	for i = 0, NB_BOXES - 2 do
		local body1 = self.boxes[i+1].body
		local body2 = self.boxes[i+2].body
		local body1Position = body1:getTransformPosition()
		local anchorPointWorldSpace =  body1Position + vmath.vector3(BOX_SIZE.x / 2.0, 0, 0);
		local jointInfo = rp3d.createHingeJointInfoWorldSpace(body1,body2, anchorPointWorldSpace,vmath.vector3(0,0,1))
		jointInfo.isCollisionEnabled = false
		local joint = self.world:createJoint(jointInfo)
	end

end

function init(self)
	create_physics(self)

	--msg.post("main:/camera3d", "set_position", { position = vmath.vector3(-8, 15, 100) })

	SCENE_HELPER.scene_new({
		name = "Hinge Chain",
		world = self.world
	})
	--timer.delay(0.05,false,function()
	--	MONARCH.show(MONARCH.top(), { reload = true })
	--end)
end

function update(self, dt)
	SCENE_HELPER.update(dt)
	SCENE_HELPER.updatePhysics(dt, self.objects)
end

function final(self)
	for _, obj in ipairs(self.objects) do
		obj:dispose()
	end
	self.objects = nil

	rp3d.destroyPhysicsWorld(self.world)
	-- self.world:Destroy()
	--SCENE_HELPER.scene_final()
end



