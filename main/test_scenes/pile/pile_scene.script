local SCENE_HELPER = require "main.gui.scene_helper"
local MONARCH = require "monarch.monarch"
local Box = require "main.objects.box"
local Dumbbell = require "main.objects.dumbbell"
local Sphere = require "main.objects.sphere"
local Capsule = require "main.objects.capsules"
local ConvexMesh = require "main.objects.convex_mesh"
local ConcaveMesh = require "main.objects.concave_mesh"

local SCENE_RADIUS = 70.0
local NB_BOXES = 100
local NB_SPHERES = 40
local NB_CAPSULES = 30
local NB_MESHES = 30
local NB_COMPOUND_SHAPES = 0
local BOX_SIZE = vmath.vector3(3,3,3)
local SPHERE_RADIUS = 2.5
local CAPSULE_RADIUS = 1.5
local CAPSULE_HEIGHT = 3
local DUMBBELL_HEIGHT = 1
local function create_physics(self)
	local settings = {
		gravity = vmath.vector3(0, -9.81, 0)
	}
	self.world = rp3d.createPhysicsWorld(settings)
	---@type GameBox[]
	self.objects = {}
	---@type GameBox[]
	self.boxes = {}
	---@type GameDumbBell[]
	self.dumbbells = {}
	---@type GameSphere[]
	self.spheres = {}
	---@type GameCapsule[]
	self.capsules = {}
	---@type GameConvexMesh[]
	self.convex_meshes = {}

	---@type GameConcaveMesh[]
	self.concave_meshes = {}

	for i = 1, NB_COMPOUND_SHAPES do
		local dumbbell = Dumbbell(true, self.world);
		dumbbell.capsule:setMaterialBounciness(0.2)
		dumbbell.sphere1:setMaterialBounciness(0.2)
		dumbbell.sphere2:setMaterialBounciness(0.2)
		table.insert(self.objects, dumbbell)
		table.insert(self.dumbbells, dumbbell)
	end

	for i = 1, NB_BOXES do
		-- Create a cube and a corresponding rigid in the physics world
		--Box* cube = new Box(true, BOX_SIZE,  mPhysicsCommon, mPhysicsWorld, mMeshFolderPath);
		local box = Box(true, SPHERE_RADIUS, self.world)
		table.insert(self.objects, box)
		table.insert(self.boxes, box)
		box.collider:setMaterialBounciness(0.2)
	end

	for i = 1, NB_SPHERES do
		-- Create a cube and a corresponding rigid in the physics world
		--Box* cube = new Box(true, BOX_SIZE,  mPhysicsCommon, mPhysicsWorld, mMeshFolderPath);
		local sphere = Sphere(true, SPHERE_RADIUS, self.world)
		table.insert(self.objects, sphere)
		table.insert(self.spheres, sphere)
		sphere.collider:setMaterialBounciness(0.2)
	end
	local res = go.get("/meshes#convex", "vertices")
	local buf = resource.get_buffer(res)
	self.polyhedron_mesh = rp3d.createPolyhedronMeshFromMeshVerticesCopy(buf)

	for i = 1, NB_MESHES do
		-- Create a cube and a corresponding rigid in the physics world
		--Box* cube = new Box(true, BOX_SIZE,  mPhysicsCommon, mPhysicsWorld, mMeshFolderPath);
		local mesh = ConvexMesh(true, self.polyhedron_mesh, "/factory#convexmesh", self.world)
		table.insert(self.objects, mesh)
		table.insert(self.convex_meshes, mesh)
		mesh.collider:setMaterialBounciness(0.2)
	end

	for i = 1, NB_CAPSULES do
		-- Create a cube and a corresponding rigid in the physics world
		--Box* cube = new Box(true, BOX_SIZE,  mPhysicsCommon, mPhysicsWorld, mMeshFolderPath);
		local capsule = Capsule(true, CAPSULE_RADIUS, CAPSULE_HEIGHT, self.world)
		table.insert(self.objects, capsule)
		table.insert(self.capsules, capsule)
		capsule.collider:setMaterialBounciness(0.2)
	end

	--local res = go.get("/meshes#castle", "vertices")
	--local buf = resource.get_buffer(res)
	--self.triangle_array = rp3d.createTriangleVertexArrayFromMeshVerticesCopy(buf)
	--self.triangle_mesh = rp3d.createTriangleMesh()
	--self.triangle_mesh:addSubpart(self.triangle_array)

	local pile_collection = collectionfactory.create("/factory#pile")
	self.triangle_arrays = {}
	self.triangle_mesh = rp3d.createTriangleMesh()
	local pile_collection_meshes = {}
	local obj_url = assert(pile_collection[hash("/root")])
	local mesh_url = msg.url(obj_url)
	mesh_url = msg.url(mesh_url.socket,mesh_url.path,"mesh")
	table.insert(pile_collection_meshes, mesh_url)
	local obj_res = go.get(mesh_url, "vertices")
	local obj_buf = resource.get_buffer(obj_res)
	local array = rp3d.createTriangleVertexArrayFromMeshVerticesCopy(obj_buf)
	self.triangle_mesh:addSubpart(array)
	table.insert(self.triangle_arrays, array)

	print("ARRAY")
	pprint(array:getNbVertices())
	pprint(array:getNbTriangles())
	for i=0,array:getNbTriangles()-1 do
		print("i:" .. i)
		pprint(array:getTriangleVertices(i))
		pprint(array:getTriangleVerticesIndices(i))
	end

	local mesh = ConcaveMesh(true, self.triangle_mesh, pile_collection, self.world)
	mesh.meshes = pile_collection_meshes
	mesh.body:setType(rp3d.BodyType.STATIC)
	mesh:setColor(vmath.vector4(0.66))
	mesh:setColorSleeping(vmath.vector4(0.66))
	table.insert(self.objects, mesh)
	table.insert(self.concave_meshes, mesh)
	mesh.collider:setMaterialBounciness(0.2)
	mesh.collider:setMaterialFrictionCoefficient(0.1)


	--INIT POSITIONS
	local radius = 3

	for index, dumbbell in ipairs(self.dumbbells) do
		local i = index - 1
		local angle = i * 30.0
		local position = vmath.vector3(
				radius * math.cos(angle),
				125 + i * (DUMBBELL_HEIGHT + 0.3),
				radius * math.sin(angle))
		dumbbell.body:setTransform({
			position = position, quat = vmath.quat()
		})
	end

	for index, box in ipairs(self.boxes) do
		local i = index - 1
		local angle = i * 30.0
		local position = vmath.vector3(
				radius * math.cos(angle),
				85 + i * (BOX_SIZE.y + 0.8),
				radius * math.sin(angle))
		box.body:setTransform({
			position = position, quat = vmath.quat()
		})
	end

	for index, sphere in ipairs(self.spheres) do
		local i = index - 1
		local angle = i * 35.0
		local position = vmath.vector3(
				radius * math.cos(angle),
				75 + i * (SPHERE_RADIUS + 0.8),
				radius * math.sin(angle))
		sphere.body:setTransform({
			position = position, quat = vmath.quat()
		})
	end

	for index, capsule in ipairs(self.capsules) do
		local i = index - 1
		local angle = i * 45.0
		local position = vmath.vector3(
				radius * math.cos(angle),
				40 + i * (CAPSULE_HEIGHT + 0.3),
				radius * math.sin(angle))
		capsule.body:setTransform({
			position = position, quat = vmath.quat()
		})
	end

	for index, mesh in ipairs(self.convex_meshes) do
		local i = index - 1
		local angle = i * 30.0
		local position = vmath.vector3(
				radius * math.cos(angle),
				30 + i * (CAPSULE_HEIGHT + 0.3),
				radius * math.sin(angle))
		mesh.body:setTransform({
			position = position, quat = vmath.quat()
		})
	end
end

function init(self)
	create_physics(self)

	msg.post("main:/camera3d", "set_position", { position = vmath.vector3(-8, 15, 100) })

	SCENE_HELPER.scene_new({
		name = "collision shapes",
		world = self.world
	})
	--timer.delay(0.05,false,function()
	--	MONARCH.show(MONARCH.top(), { reload = true })
	--end)
end

function update(self, dt)
	SCENE_HELPER.update(dt)
	SCENE_HELPER.updatePhysics(dt, self.objects)
end

function final(self)
	for _, obj in ipairs(self.objects) do
		obj:dispose()
	end
	self.objects = nil
	if (self.polyhedron_mesh) then
		rp3d.destroyPolyhedronMesh(self.polyhedron_mesh)
		self.convex_meshes = nil
	end

	if (self.triangle_meshe) then
		rp3d.destroyTriangleMesh(self.triangle_mesh)
		self.triangle_mesh = nil
	end

	if (self.triangle_arrays) then
		for _, array in ipairs(self.triangle_arrays) do
			rp3d.destroyTriangleVertexArray(array)
		end
		self.triangle_arrays = nil
	end

	rp3d.destroyPhysicsWorld(self.world)
	-- self.world:Destroy()
	SCENE_HELPER.scene_final()
end



